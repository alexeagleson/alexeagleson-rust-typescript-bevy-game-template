/*
 Generated by typeshare 1.0.0
*/

/** A single entry in the game log */
export type LogMessage = string;

/**
 * A single unit change in relative position meant to be added to a `Position`
 * values intended to be either 1, 0 or -1 and transformed from a `Direction`
 */
export interface Delta {
	x: number;
	y: number;
}

/** Information about the size of a 2D space */
export interface Dimensions2d {
	width: number;
	height: number;
}

/** Represents the location of something on a 2D grid */
export interface Position {
	x: number;
	y: number;
}

export interface UserId {
	id: number;
}

export interface EntityIndex {
	index: number;
}

/** Information about a specific player's current position */
export interface EntityPositionChange {
	entityIndex: EntityIndex;
	pos: Position;
}

/** Information about a specific player's current position */
export interface GameEntity {
	entityPosition: EntityPositionChange;
	sprite: SpriteTexture;
}

/** Information about a player */
export interface PlayerDetails {
	name: string;
}

/**
 * Yes I know this name sucks. What's better?
 * https://en.wikipedia.org/wiki/Body_relative_direction
 */
export enum BodyRelative {
	Up = "up",
	Down = "down",
	Left = "left",
	Right = "right",
}

/** A sprite to render that represents a visible entity */
export enum SpriteTexture {
	Bunny = "bunny",
	Carrot = "carrot",
}

/** An input interaction from the client */
export type ClientMessage = 
	| { type: "tileHover", content: Position }
	| { type: "tileClick", content: Position }
	| { type: "initialize", content?: undefined }
	| { type: "keypress", content: BodyRelative }
	| { type: "disconnect", content?: undefined };

/** Communicates information about the active game to the client */
export type ServerMessage = 
	| { type: "removeEntity", content: EntityIndex }
	| { type: "allGameEntities", content: GameEntity[] }
	| { type: "entityPositionChange", content: EntityPositionChange }
	| { type: "tileHover", content?: PlayerDetails }
	| { type: "tileClick", content: LogMessage }
	| { type: "moveCount", content: number };

